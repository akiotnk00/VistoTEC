/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package visao;

import dao.VistoriaDAO;
import java.io.File;
import java.io.InputStream;
import java.util.HashMap;
import javax.persistence.EntityManager;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.query.JRJpaQueryExecuterFactory;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Akio
 */
public class SelecionarRelatorioVisao extends javax.swing.JFrame {

    /**
     * Creates new form RelatorioVisaoVistorias
     */
    public SelecionarRelatorioVisao() {
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/icones/vistotec-logo.png")).getImage());
        jLabelCampo.setText("");
        jTextFieldFiltro.setEnabled(false);
        desativaCampoData(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jDateChooserDataInicial = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jDateChooserDataFinal = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();
        jLabelFiltro = new javax.swing.JLabel();
        jComboBoxFiltro = new javax.swing.JComboBox<>();
        jTextFieldFiltro = new javax.swing.JTextField();
        jLabelCampo = new javax.swing.JLabel();
        jComboBoxFiltro2 = new javax.swing.JComboBox<>();
        jLabelFiltro2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("VistoTEC - Gerar Relatório");

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel1.setBackground(new java.awt.Color(255, 255, 51));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel2.setText("Data Inicial:");

        jDateChooserDataInicial.setDateFormatString("dd/MM/yy");

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel3.setText("Data Final:");

        jDateChooserDataFinal.setDateFormatString("dd/MM/yy");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDateChooserDataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDateChooserDataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jDateChooserDataFinal, jDateChooserDataInicial});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel2)
                    .addComponent(jDateChooserDataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jDateChooserDataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jButton1.setBackground(new java.awt.Color(0, 102, 153));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/vistoria_icone.png"))); // NOI18N
        jButton1.setText("Gerar Relatório");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabelFiltro.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabelFiltro.setText("Relatório:");

        jComboBoxFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Vistorias", "Clientes", "Veículos", "Parceiros", "Caixas", "Contas a Pagar", "Movimentações" }));
        jComboBoxFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFiltroActionPerformed(evt);
            }
        });

        jLabelCampo.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabelCampo.setText("Campo Filtro:");

        jComboBoxFiltro2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nenhum" }));
        jComboBoxFiltro2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFiltro2ActionPerformed(evt);
            }
        });

        jLabelFiltro2.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabelFiltro2.setText("Filtro:");

        jButton2.setBackground(new java.awt.Color(204, 0, 51));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/close_icone.png"))); // NOI18N
        jButton2.setText("Fechar");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabelCampo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                            .addComponent(jButton1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2))
                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabelFiltro)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jComboBoxFiltro, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabelFiltro2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jComboBoxFiltro2, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabelFiltro)
                    .addComponent(jComboBoxFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxFiltro2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelFiltro2))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCampo)
                    .addComponent(jTextFieldFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jButton2});

        jPanel4.setBackground(new java.awt.Color(0, 0, 0));
        jPanel4.setForeground(new java.awt.Color(255, 255, 255));

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("GERAR RELATÓRIO");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel8)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel8)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFiltroActionPerformed
        // Verifica a opção escolhida no filtro.
        jDateChooserDataInicial.setDate(null);
        jDateChooserDataFinal.setDate(null);
        jLabelCampo.setText("");
        jTextFieldFiltro.setEnabled(false);

        switch (jComboBoxFiltro.getSelectedIndex()) {
            case 0:
                jComboBoxFiltro2.setEnabled(false);
                jComboBoxFiltro2.setModel(new DefaultComboBoxModel<>(new String[]{"Nenhum"}));
                jTextFieldFiltro.setText("");
                jLabelCampo.setText("");
                jTextFieldFiltro.setEnabled(false);
                desativaCampoData(false);

                break;

            // Vistorias   
            case 1:

                // Preenche os dados no box 2.
                jComboBoxFiltro2.setEnabled(true);
                jComboBoxFiltro2.setModel(new DefaultComboBoxModel<>(new String[]{"Nenhum", "Placa", "CPF", "Reprovadas", "Retornos", "Parceiro", "Caixa"}));
                desativaCampoData(true);
                break;

            // Clientes
            case 2:
                jComboBoxFiltro2.setEnabled(true);
                jComboBoxFiltro2.setModel(new DefaultComboBoxModel<>(new String[]{"Nenhum", "Nome", "CPF", "Telefone", "Cidade"}));

                break;

            // Veiculos
            case 3:
                jComboBoxFiltro2.setEnabled(true);
                jComboBoxFiltro2.setModel(new DefaultComboBoxModel<>(new String[]{"Nenhum", "Placa", "Modelo"}));

                break;

            // Parceiros
            case 4:
                jComboBoxFiltro2.setEnabled(true);
                jComboBoxFiltro2.setModel(new DefaultComboBoxModel<>(new String[]{"Nenhum", "Nome"}));

                break;

            // Caixas
            case 5:
                jComboBoxFiltro2.setEnabled(true);
                jComboBoxFiltro2.setModel(new DefaultComboBoxModel<>(new String[]{"Nenhum", "Nome"}));

                break;

            // Contas a pagar 
            case 6:
                jComboBoxFiltro2.setEnabled(true);
                jComboBoxFiltro2.setModel(new DefaultComboBoxModel<>(new String[]{"Nenhum", "Pagas", "Pendentes"}));
                break;

            // Movimentacoes
            default:
                jComboBoxFiltro2.setEnabled(true);
                jComboBoxFiltro2.setModel(new DefaultComboBoxModel<>(new String[]{"Nenhum", "Caixa-Usuário", "Entrada", "Saida"}));
        }

    }//GEN-LAST:event_jComboBoxFiltroActionPerformed

    // Verifica se as datas foram preenchidas.
    private void msgDataVazia() {

        // Data Inicial vazia
        if (jDateChooserDataInicial.getDate() == null) {
            JOptionPane.showMessageDialog(rootPane, "Favor preencher todos os campos de data.");

        } // Data Inicial preenchida
        else {

            // Data Final vazia
            if (jDateChooserDataFinal.getDate() == null) {
                JOptionPane.showMessageDialog(rootPane, "Favor preencher todos os campos de data.");
            }
        }
    }

    // Verifica se as datas foram preenchidas.
    private boolean verificaDataVazia() {

        // Data Inicial vazia
        if (jDateChooserDataInicial.getDate() == null) {
            return jDateChooserDataFinal.getDate() == null;

        } // Data Inicial preenchida
        else {

            return false;
        }
    }

    // Desativa ou ativa os campos de data.
    private void desativaCampoData(Boolean opcao) {
        jDateChooserDataInicial.setEnabled(opcao);
        jDateChooserDataFinal.setEnabled(opcao);
    }

    private void jComboBoxFiltro2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFiltro2ActionPerformed
        jDateChooserDataInicial.setDate(null);
        jDateChooserDataFinal.setDate(null);
        jTextFieldFiltro.setText("");
        jLabelCampo.setText("");

        switch (jComboBoxFiltro.getSelectedIndex()) {

            // Vistorias   
            case 1:

                switch (jComboBoxFiltro2.getSelectedIndex()) {

                    //Nenhum
                    case 0:
                        desativaCampoData(true);
                        break;

                    //Placa
                    case 1:
                        jTextFieldFiltro.setEnabled(true);
                        desativaCampoData(false);
                        jLabelCampo.setText(jComboBoxFiltro2.getSelectedItem().toString());
                        break;
                    //CPF
                    case 2:
                        jTextFieldFiltro.setEnabled(true);
                        jLabelCampo.setText(jComboBoxFiltro2.getSelectedItem().toString());
                        break;
                    //Reprovadas
                    case 3:
                        jLabelCampo.setText("");
                        desativaCampoData(false);
                        jTextFieldFiltro.setEnabled(false);
                        desativaCampoData(true);
                        break;
                    //Retornos
                    case 4:
                        jLabelCampo.setText("");
                        jTextFieldFiltro.setEnabled(false);
                        desativaCampoData(true);
                        break;
                    //Parceiros
                    case 5:
                        desativaCampoData(true);
                        jTextFieldFiltro.setEnabled(true);
                        jLabelCampo.setText(jComboBoxFiltro2.getSelectedItem().toString());
                        break;
                    //Caixas
                    default:
                        desativaCampoData(true);
                        jTextFieldFiltro.setEnabled(true);
                        jLabelCampo.setText(jComboBoxFiltro2.getSelectedItem().toString());
                        break;

                }
                break;

            // Clientes
            case 2:

                switch (jComboBoxFiltro2.getSelectedIndex()) {

                    //Nenhum
                    case 0:
                        desativaCampoData(false);
                        jLabelCampo.setText("");
                        jTextFieldFiltro.setEnabled(false);
                        break;

                    //Nome
                    case 1:
                        desativaCampoData(false);
                        jTextFieldFiltro.setEnabled(true);
                        jLabelCampo.setText(jComboBoxFiltro2.getSelectedItem().toString());
                        break;
                    //CPF
                    case 2:
                        desativaCampoData(false);
                        jTextFieldFiltro.setEnabled(true);
                        jLabelCampo.setText(jComboBoxFiltro2.getSelectedItem().toString());
                        break;
                    //Telefone
                    case 3:

                        desativaCampoData(false);
                        jTextFieldFiltro.setEnabled(true);
                        jLabelCampo.setText(jComboBoxFiltro2.getSelectedItem().toString());
                        break;

                    //Cidade
                    default:
                        desativaCampoData(false);
                        jTextFieldFiltro.setEnabled(true);
                        jLabelCampo.setText(jComboBoxFiltro2.getSelectedItem().toString());
                        break;
                }

                break;

            // Veiculos
            case 3:

                switch (jComboBoxFiltro2.getSelectedIndex()) {

                    //Nenhum
                    case 0:
                        desativaCampoData(false);
                        jLabelCampo.setText("");
                        jTextFieldFiltro.setEnabled(false);
                        break;

                    //Placa
                    case 1:
                        desativaCampoData(false);
                        jTextFieldFiltro.setEnabled(true);
                        jLabelCampo.setText(jComboBoxFiltro2.getSelectedItem().toString());
                        break;

                    //Modelo
                    default:
                        desativaCampoData(false);
                        jTextFieldFiltro.setEnabled(true);
                        jLabelCampo.setText(jComboBoxFiltro2.getSelectedItem().toString());
                        break;
                }

                break;

            // Parceiros
            case 4:

                switch (jComboBoxFiltro2.getSelectedIndex()) {

                    //Nenhum
                    case 0:
                        desativaCampoData(false);
                        jLabelCampo.setText("");
                        jTextFieldFiltro.setEnabled(false);
                        break;

                    //Nome
                    default:
                        desativaCampoData(false);
                        jTextFieldFiltro.setEnabled(true);
                        jLabelCampo.setText(jComboBoxFiltro2.getSelectedItem().toString());
                        break;
                }

                break;

            // Caixas
            case 5:
                switch (jComboBoxFiltro2.getSelectedIndex()) {

                    //Nenhum
                    case 0:
                        desativaCampoData(false);
                        jLabelCampo.setText("");
                        jTextFieldFiltro.setEnabled(false);
                        break;

                    //Nome
                    default:
                        desativaCampoData(false);
                        jTextFieldFiltro.setEnabled(true);
                        jLabelCampo.setText(jComboBoxFiltro2.getSelectedItem().toString());
                        break;
                }

                break;

            // Contas a pagar 
            case 6:

                switch (jComboBoxFiltro2.getSelectedIndex()) {

                    //Nenhum
                    case 0:
                        desativaCampoData(false);
                        jLabelCampo.setText("");
                        jTextFieldFiltro.setEnabled(false);
                        break;

                    //Pagas
                    case 1:
                        desativaCampoData(true);
                        jLabelCampo.setText("");
                        jTextFieldFiltro.setEnabled(false);
                        break;

                    //Pendentes
                    default:
                        desativaCampoData(true);
                        jLabelCampo.setText("");
                        jTextFieldFiltro.setEnabled(false);
                        break;
                }

                break;

            // Movimentacoes    
            default:
                switch (jComboBoxFiltro2.getSelectedIndex()) {

                    //Nenhum
                    case 0:
                        desativaCampoData(true);
                        break;

                    //Usuário
                    case 1:
                        desativaCampoData(false);
                        jLabelCampo.setText(jComboBoxFiltro2.getSelectedItem().toString());
                        jTextFieldFiltro.setEnabled(true);
                        break;

                    //Entradas
                    case 2:
                        desativaCampoData(false);
                        jLabelCampo.setText("");
                        jTextFieldFiltro.setEnabled(false);
                        break;

                    //Saídas
                    default:
                        desativaCampoData(false);
                        jLabelCampo.setText("");
                        jTextFieldFiltro.setEnabled(false);
                        break;
                }

                break;
        }


    }//GEN-LAST:event_jComboBoxFiltro2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        switch (jComboBoxFiltro.getSelectedIndex()) {

            // Vistorias   
            case 1:

                switch (jComboBoxFiltro2.getSelectedIndex()) {

                    //Nenhum
                    case 0:
                        String local;
                        try {
                            // Verifica se a data está vazia.
                            if (verificaDataVazia()) {
                                local = "../relatorios/vistorias_semdata.jrxml";

                            } else {
                                local = "../relatorios/vistorias_comdata.jrxml";
                            }
                            File localFile = new File(local);
                            InputStream is = getClass().getResourceAsStream(localFile.getPath());
                            JasperDesign jd = JRXmlLoader.load(is);
                            //testar com input stream
                            JasperReport jr = JasperCompileManager.compileReport(jd);

                            EntityManager em = new VistoriaDAO().getEntityManager();

                            HashMap<String, Object> parametros = new HashMap<>();
                            parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);
                            parametros.put("dataInicial", jDateChooserDataInicial.getDate());
                            parametros.put("dataFinal", jDateChooserDataFinal.getDate());

                            JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                            JasperViewer jv = new JasperViewer(jp, false);
                            jv.setVisible(true);

                        } catch (JRException ex) {
                            ex.printStackTrace();
                        }
                        break;

                    //Placa
                    case 1:
                        if (!jTextFieldFiltro.getText().isEmpty()) {
                            try {
                                InputStream is = getClass().getResourceAsStream("/relatorios/vistorias_placa.jrxml");
                                JasperDesign jd = JRXmlLoader.load(is);
                                //testar com input stream
                                JasperReport jr = JasperCompileManager.compileReport(jd);

                                EntityManager em = new VistoriaDAO().getEntityManager();

                                HashMap<String, Object> parametros = new HashMap<>();
                                parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);
                                parametros.put("filtro", jTextFieldFiltro.getText());

                                JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                                JasperViewer jv = new JasperViewer(jp, false);
                                jv.setVisible(true);

                            } catch (JRException ex) {
                                ex.printStackTrace();
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Favor preencher o filtro " + jComboBoxFiltro2.getSelectedItem());
                            jTextFieldFiltro.requestFocus();
                        }

                        break;
                    //CPF
                    case 2:
                        if (!jTextFieldFiltro.getText().isEmpty()) {
                            try {
                                InputStream is = getClass().getResourceAsStream("/relatorios/vistorias_cpf.jrxml");
                                JasperDesign jd = JRXmlLoader.load(is);
                                //testar com input stream
                                JasperReport jr = JasperCompileManager.compileReport(jd);

                                EntityManager em = new VistoriaDAO().getEntityManager();

                                HashMap<String, Object> parametros = new HashMap<>();
                                parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);
                                parametros.put("filtro", jTextFieldFiltro.getText());

                                JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                                JasperViewer jv = new JasperViewer(jp, false);
                                jv.setVisible(true);

                            } catch (JRException ex) {
                                ex.printStackTrace();
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Favor preencher o filtro " + jComboBoxFiltro2.getSelectedItem());
                            jTextFieldFiltro.requestFocus();
                        }
                        break;
                    //Reprovadas
                    case 3:
                        if (!verificaDataVazia()) {
                            try {

                                InputStream is = getClass().getResourceAsStream("/relatorios/vistorias_reprovadas.jrxml");
                                JasperDesign jd = JRXmlLoader.load(is);
                                //testar com input stream
                                JasperReport jr = JasperCompileManager.compileReport(jd);

                                EntityManager em = new VistoriaDAO().getEntityManager();

                                HashMap<String, Object> parametros = new HashMap<>();
                                parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);
                                parametros.put("dataInicial", jDateChooserDataInicial.getDate());
                                parametros.put("dataFinal", jDateChooserDataFinal.getDate());

                                JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                                JasperViewer jv = new JasperViewer(jp, false);
                                jv.setVisible(true);

                            } catch (JRException ex) {
                                ex.printStackTrace();
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Favor preencher todos os campos de data!");
                        }
                        break;
                    //Retornos
                    case 4:
                        if (!verificaDataVazia()) {
                            try {

                                InputStream is = getClass().getResourceAsStream("/relatorios/vistorias_retornos.jrxml");
                                JasperDesign jd = JRXmlLoader.load(is);
                                //testar com input stream
                                JasperReport jr = JasperCompileManager.compileReport(jd);

                                EntityManager em = new VistoriaDAO().getEntityManager();

                                HashMap<String, Object> parametros = new HashMap<>();
                                parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);
                                parametros.put("dataInicial", jDateChooserDataInicial.getDate());
                                parametros.put("dataFinal", jDateChooserDataFinal.getDate());

                                JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                                JasperViewer jv = new JasperViewer(jp, false);
                                jv.setVisible(true);

                            } catch (JRException ex) {
                                ex.printStackTrace();
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Favor preencher todos os campos de data!");
                        }
                        break;
                    //Parceiros
                    case 5:
                        if (!jTextFieldFiltro.getText().isEmpty()) {
                            if (!verificaDataVazia()) {
                                try {
                                    InputStream is = getClass().getResourceAsStream("/relatorios/vistorias_parceiros.jrxml");
                                    JasperDesign jd = JRXmlLoader.load(is);
                                    //testar com input stream
                                    JasperReport jr = JasperCompileManager.compileReport(jd);

                                    EntityManager em = new VistoriaDAO().getEntityManager();

                                    HashMap<String, Object> parametros = new HashMap<>();
                                    parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);
                                    parametros.put("filtro", jTextFieldFiltro.getText());
                                    parametros.put("dataInicial", jDateChooserDataInicial.getDate());
                                    parametros.put("dataFinal", jDateChooserDataFinal.getDate());

                                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                                    JasperViewer jv = new JasperViewer(jp, false);
                                    jv.setVisible(true);

                                } catch (JRException ex) {
                                    ex.printStackTrace();
                                }
                            } else {
                                JOptionPane.showMessageDialog(rootPane, "Favor preencher todos os campos de data!");
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Favor preencher o filtro " + jComboBoxFiltro2.getSelectedItem());
                            jTextFieldFiltro.requestFocus();
                        }
                        break;
                    default:
                        if (!jTextFieldFiltro.getText().isEmpty()) {
                            if (!verificaDataVazia()) {
                                try {
                                    InputStream is = getClass().getResourceAsStream("/relatorios/vistorias_caixas.jrxml");
                                    JasperDesign jd = JRXmlLoader.load(is);
                                    //testar com input stream
                                    JasperReport jr = JasperCompileManager.compileReport(jd);

                                    EntityManager em = new VistoriaDAO().getEntityManager();

                                    HashMap<String, Object> parametros = new HashMap<>();
                                    parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);
                                    parametros.put("filtro", jTextFieldFiltro.getText());
                                    parametros.put("dataInicial", jDateChooserDataInicial.getDate());
                                    parametros.put("dataFinal", jDateChooserDataFinal.getDate());

                                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                                    JasperViewer jv = new JasperViewer(jp, false);
                                    jv.setVisible(true);

                                } catch (JRException ex) {
                                    ex.printStackTrace();
                                }
                            } else {
                                JOptionPane.showMessageDialog(rootPane, "Favor preencher todos os campos de data!");
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Favor preencher o filtro " + jComboBoxFiltro2.getSelectedItem());
                            jTextFieldFiltro.requestFocus();
                        }
                        break;
                }
                break;

            // Clientes
            case 2:

                switch (jComboBoxFiltro2.getSelectedIndex()) {

                    //Nenhum
                    case 0:
                    try {
                        InputStream is = getClass().getResourceAsStream("/relatorios/clientes.jrxml");
                        JasperDesign jd = JRXmlLoader.load(is);
                        //testar com input stream
                        JasperReport jr = JasperCompileManager.compileReport(jd);

                        EntityManager em = new VistoriaDAO().getEntityManager();

                        HashMap<String, Object> parametros = new HashMap<>();
                        parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);
                        parametros.put("filtro", jTextFieldFiltro.getText());

                        JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                        JasperViewer jv = new JasperViewer(jp, false);
                        jv.setVisible(true);

                    } catch (JRException ex) {
                        ex.printStackTrace();
                    }

                    break;

                    //Nome
                    case 1:
                        if (!jTextFieldFiltro.getText().isEmpty()) {
                            try {
                                InputStream is = getClass().getResourceAsStream("/relatorios/clientes_nome.jrxml");
                                JasperDesign jd = JRXmlLoader.load(is);
                                //testar com input stream
                                JasperReport jr = JasperCompileManager.compileReport(jd);

                                EntityManager em = new VistoriaDAO().getEntityManager();

                                HashMap<String, Object> parametros = new HashMap<>();
                                parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);
                                parametros.put("filtro", jTextFieldFiltro.getText());

                                JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                                JasperViewer jv = new JasperViewer(jp, false);
                                jv.setVisible(true);

                            } catch (JRException ex) {
                                ex.printStackTrace();
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Favor preencher o filtro " + jComboBoxFiltro2.getSelectedItem());
                            jTextFieldFiltro.requestFocus();
                        }
                        break;
                    //CPF
                    case 2:
                        if (!jTextFieldFiltro.getText().isEmpty()) {
                            try {
                                InputStream is = getClass().getResourceAsStream("/relatorios/clientes_cpf.jrxml");
                                JasperDesign jd = JRXmlLoader.load(is);
                                //testar com input stream
                                JasperReport jr = JasperCompileManager.compileReport(jd);

                                EntityManager em = new VistoriaDAO().getEntityManager();

                                HashMap<String, Object> parametros = new HashMap<>();
                                parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);
                                parametros.put("filtro", jTextFieldFiltro.getText());

                                JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                                JasperViewer jv = new JasperViewer(jp, false);
                                jv.setVisible(true);

                            } catch (JRException ex) {
                                ex.printStackTrace();
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Favor preencher o filtro " + jComboBoxFiltro2.getSelectedItem());
                            jTextFieldFiltro.requestFocus();
                        }
                        break;
                    //Telefone
                    case 3:

                        if (!jTextFieldFiltro.getText().isEmpty()) {
                            try {
                                InputStream is = getClass().getResourceAsStream("/relatorios/clientes_telefone.jrxml");
                                JasperDesign jd = JRXmlLoader.load(is);
                                //testar com input stream
                                JasperReport jr = JasperCompileManager.compileReport(jd);

                                EntityManager em = new VistoriaDAO().getEntityManager();

                                HashMap<String, Object> parametros = new HashMap<>();
                                parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);
                                parametros.put("filtro", jTextFieldFiltro.getText());

                                JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                                JasperViewer jv = new JasperViewer(jp, false);
                                jv.setVisible(true);

                            } catch (JRException ex) {
                                ex.printStackTrace();
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Favor preencher o filtro " + jComboBoxFiltro2.getSelectedItem());
                            jTextFieldFiltro.requestFocus();
                        }
                        break;

                    //Cidade
                    default:
                        if (!jTextFieldFiltro.getText().isEmpty()) {
                            try {
                                InputStream is = getClass().getResourceAsStream("/relatorios/clientes_cidade.jrxml");
                                JasperDesign jd = JRXmlLoader.load(is);
                                //testar com input stream
                                JasperReport jr = JasperCompileManager.compileReport(jd);

                                EntityManager em = new VistoriaDAO().getEntityManager();

                                HashMap<String, Object> parametros = new HashMap<>();
                                parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);
                                parametros.put("filtro", jTextFieldFiltro.getText());

                                JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                                JasperViewer jv = new JasperViewer(jp, false);
                                jv.setVisible(true);

                            } catch (JRException ex) {
                                ex.printStackTrace();
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Favor preencher o filtro " + jComboBoxFiltro2.getSelectedItem());
                            jTextFieldFiltro.requestFocus();
                        }
                        break;
                }

                break;

            // Veiculos
            case 3:

                switch (jComboBoxFiltro2.getSelectedIndex()) {

                    //Nenhum
                    case 0:
                        if (!jTextFieldFiltro.getText().isEmpty()) {
                            try {
                                InputStream is = getClass().getResourceAsStream("/relatorios/veiculos.jrxml");
                                JasperDesign jd = JRXmlLoader.load(is);
                                //testar com input stream
                                JasperReport jr = JasperCompileManager.compileReport(jd);

                                EntityManager em = new VistoriaDAO().getEntityManager();

                                HashMap<String, Object> parametros = new HashMap<>();
                                parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);
                                parametros.put("filtro", jTextFieldFiltro.getText());

                                JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                                JasperViewer jv = new JasperViewer(jp, false);
                                jv.setVisible(true);

                            } catch (JRException ex) {
                                ex.printStackTrace();
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Favor preencher o filtro " + jComboBoxFiltro2.getSelectedItem());
                            jTextFieldFiltro.requestFocus();
                        }
                        break;

                    //Placa
                    case 1:
                        if (!jTextFieldFiltro.getText().isEmpty()) {
                            try {
                                InputStream is = getClass().getResourceAsStream("/relatorios/veiculos_placa.jrxml");
                                JasperDesign jd = JRXmlLoader.load(is);
                                //testar com input stream
                                JasperReport jr = JasperCompileManager.compileReport(jd);

                                EntityManager em = new VistoriaDAO().getEntityManager();

                                HashMap<String, Object> parametros = new HashMap<>();
                                parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);
                                parametros.put("filtro", jTextFieldFiltro.getText());

                                JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                                JasperViewer jv = new JasperViewer(jp, false);
                                jv.setVisible(true);

                            } catch (JRException ex) {
                                ex.printStackTrace();
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Favor preencher o filtro " + jComboBoxFiltro2.getSelectedItem());
                            jTextFieldFiltro.requestFocus();
                        }
                        break;

                    //Modelo
                    default:
                        if (!jTextFieldFiltro.getText().isEmpty()) {
                            try {
                                InputStream is = getClass().getResourceAsStream("/relatorios/veiculos_modelo.jrxml");
                                JasperDesign jd = JRXmlLoader.load(is);
                                //testar com input stream
                                JasperReport jr = JasperCompileManager.compileReport(jd);

                                EntityManager em = new VistoriaDAO().getEntityManager();

                                HashMap<String, Object> parametros = new HashMap<>();
                                parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);
                                parametros.put("filtro", jTextFieldFiltro.getText());

                                JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                                JasperViewer jv = new JasperViewer(jp, false);
                                jv.setVisible(true);

                            } catch (JRException ex) {
                                ex.printStackTrace();
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Favor preencher o filtro " + jComboBoxFiltro2.getSelectedItem());
                            jTextFieldFiltro.requestFocus();
                        }
                        break;
                }

                break;

            // Parceiros
            case 4:

                switch (jComboBoxFiltro2.getSelectedIndex()) {

                    //Nenhum
                    case 0:
                        if (!jTextFieldFiltro.getText().isEmpty()) {
                            try {
                                InputStream is = getClass().getResourceAsStream("/relatorios/parceiro.jrxml");
                                JasperDesign jd = JRXmlLoader.load(is);
                                //testar com input stream
                                JasperReport jr = JasperCompileManager.compileReport(jd);

                                EntityManager em = new VistoriaDAO().getEntityManager();

                                HashMap<String, Object> parametros = new HashMap<>();
                                parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);
                                parametros.put("filtro", jTextFieldFiltro.getText());

                                JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                                JasperViewer jv = new JasperViewer(jp, false);
                                jv.setVisible(true);

                            } catch (JRException ex) {
                                ex.printStackTrace();
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Favor preencher o filtro " + jComboBoxFiltro2.getSelectedItem());
                            jTextFieldFiltro.requestFocus();
                        }
                        break;

                    //Nome
                    default:
                        if (!jTextFieldFiltro.getText().isEmpty()) {
                            try {
                                InputStream is = getClass().getResourceAsStream("/relatorios/parceiro_nome.jrxml");
                                JasperDesign jd = JRXmlLoader.load(is);
                                //testar com input stream
                                JasperReport jr = JasperCompileManager.compileReport(jd);

                                EntityManager em = new VistoriaDAO().getEntityManager();

                                HashMap<String, Object> parametros = new HashMap<>();
                                parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);
                                parametros.put("filtro", jTextFieldFiltro.getText());

                                JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                                JasperViewer jv = new JasperViewer(jp, false);
                                jv.setVisible(true);

                            } catch (JRException ex) {
                                ex.printStackTrace();
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Favor preencher o filtro " + jComboBoxFiltro2.getSelectedItem());
                            jTextFieldFiltro.requestFocus();
                        }
                        break;
                }

                break;

            // Caixas
            case 5:
                switch (jComboBoxFiltro2.getSelectedIndex()) {

                    //Nenhum
                    case 0:
                            try {
                        InputStream is = getClass().getResourceAsStream("/relatorios/caixas.jrxml");
                        JasperDesign jd = JRXmlLoader.load(is);
                        //testar com input stream
                        JasperReport jr = JasperCompileManager.compileReport(jd);

                        EntityManager em = new VistoriaDAO().getEntityManager();

                        HashMap<String, Object> parametros = new HashMap<>();
                        parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);

                        JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                        JasperViewer jv = new JasperViewer(jp, false);
                        jv.setVisible(true);

                    } catch (JRException ex) {
                        ex.printStackTrace();
                    }

                    break;

                    //Nome
                    default:
                        if (!jTextFieldFiltro.getText().isEmpty()) {
                            try {
                                InputStream is = getClass().getResourceAsStream("/relatorios/caixas_nome.jrxml");
                                JasperDesign jd = JRXmlLoader.load(is);
                                //testar com input stream
                                JasperReport jr = JasperCompileManager.compileReport(jd);

                                EntityManager em = new VistoriaDAO().getEntityManager();

                                HashMap<String, Object> parametros = new HashMap<>();
                                parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);
                                parametros.put("filtro", jTextFieldFiltro.getText());

                                JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                                JasperViewer jv = new JasperViewer(jp, false);
                                jv.setVisible(true);

                            } catch (JRException ex) {
                                ex.printStackTrace();
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Favor preencher o filtro " + jComboBoxFiltro2.getSelectedItem());
                            jTextFieldFiltro.requestFocus();
                        }
                        break;
                }

                break;

            // Contas a pagar 
            case 6:

                switch (jComboBoxFiltro2.getSelectedIndex()) {

                    //Nenhum
                    case 0:
                            try {

                        InputStream is = getClass().getResourceAsStream("/relatorios/contas.jrxml");
                        JasperDesign jd = JRXmlLoader.load(is);
                        //testar com input stream
                        JasperReport jr = JasperCompileManager.compileReport(jd);

                        EntityManager em = new VistoriaDAO().getEntityManager();

                        HashMap<String, Object> parametros = new HashMap<>();
                        parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);

                        JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                        JasperViewer jv = new JasperViewer(jp, false);
                        jv.setVisible(true);

                    } catch (JRException ex) {
                        ex.printStackTrace();
                    }
                    break;

                    //Pagas
                    case 1:

                        if (!verificaDataVazia()) {
                            try {

                                InputStream is = getClass().getResourceAsStream("/relatorios/contas_pagas.jrxml");
                                JasperDesign jd = JRXmlLoader.load(is);
                                //testar com input stream
                                JasperReport jr = JasperCompileManager.compileReport(jd);

                                EntityManager em = new VistoriaDAO().getEntityManager();

                                HashMap<String, Object> parametros = new HashMap<>();
                                parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);
                                parametros.put("dataInicial", jDateChooserDataInicial.getDate());
                                parametros.put("dataFinal", jDateChooserDataFinal.getDate());

                                JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                                JasperViewer jv = new JasperViewer(jp, false);
                                jv.setVisible(true);

                            } catch (JRException ex) {
                                ex.printStackTrace();
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Favor preencher todos os campos de data!");
                        }
                        break;

                    //Pendentes
                    default:
                        if (!verificaDataVazia()) {
                            try {

                                InputStream is = getClass().getResourceAsStream("/relatorios/contas_naopagas.jrxml");
                                JasperDesign jd = JRXmlLoader.load(is);
                                //testar com input stream
                                JasperReport jr = JasperCompileManager.compileReport(jd);

                                EntityManager em = new VistoriaDAO().getEntityManager();

                                HashMap<String, Object> parametros = new HashMap<>();
                                parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);
                                parametros.put("dataInicial", jDateChooserDataInicial.getDate());
                                parametros.put("dataFinal", jDateChooserDataFinal.getDate());

                                JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                                JasperViewer jv = new JasperViewer(jp, false);
                                jv.setVisible(true);

                            } catch (JRException ex) {
                                ex.printStackTrace();
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Favor preencher todos os campos de data!");
                        }
                        break;
                }

                break;

            // Movimentacoes    
            default:
                switch (jComboBoxFiltro2.getSelectedIndex()) {

                    //Nenhum
                    case 0:
                        String local;
                        try {
                            // Verifica se a data está vazia.
                            if (verificaDataVazia()) {
                                local = "../relatorios/movimentacoes.jrxml";

                            } else {
                                local = "../relatorios/movimentacoes_comData.jrxml";
                            }
                            File localFile = new File(local);
                            InputStream is = getClass().getResourceAsStream(localFile.getPath());
                            JasperDesign jd = JRXmlLoader.load(is);
                            //testar com input stream
                            JasperReport jr = JasperCompileManager.compileReport(jd);

                            EntityManager em = new VistoriaDAO().getEntityManager();

                            HashMap<String, Object> parametros = new HashMap<>();
                            parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);
                            parametros.put("dataInicial", jDateChooserDataInicial.getDate());
                            parametros.put("dataFinal", jDateChooserDataFinal.getDate());

                            JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                            JasperViewer jv = new JasperViewer(jp, false);
                            jv.setVisible(true);

                        } catch (JRException ex) {
                            ex.printStackTrace();
                        }
                        break;

                    // Caixa - Usuario    
                    case 1:
                        if (!jTextFieldFiltro.getText().isEmpty()) {
                            try {
                                InputStream is = getClass().getResourceAsStream("/relatorios/movimentacoes_usuario.jrxml");
                                JasperDesign jd = JRXmlLoader.load(is);
                                //testar com input stream
                                JasperReport jr = JasperCompileManager.compileReport(jd);
 
                                EntityManager em = new VistoriaDAO().getEntityManager();

                                HashMap<String, Object> parametros = new HashMap<>();
                                parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);
                                parametros.put("filtro", jTextFieldFiltro.getText());

                                JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                                JasperViewer jv = new JasperViewer(jp, false);
                                jv.setVisible(true);

                            } catch (JRException ex) {
                                ex.printStackTrace();
                            }
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Favor preencher o filtro " + jComboBoxFiltro2.getSelectedItem());
                            jTextFieldFiltro.requestFocus();
                        }
                        break;

                    // Entradas
                    case 2:
                         try {

                        InputStream is = getClass().getResourceAsStream("/relatorios/movimentacoes_entrada.jrxml");
                        JasperDesign jd = JRXmlLoader.load(is);
                        //testar com input stream
                        JasperReport jr = JasperCompileManager.compileReport(jd);

                        EntityManager em = new VistoriaDAO().getEntityManager();

                        HashMap<String, Object> parametros = new HashMap<>();
                        parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);

                        JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                        JasperViewer jv = new JasperViewer(jp, false);
                        jv.setVisible(true);

                    } catch (JRException ex) {
                        ex.printStackTrace();
                    }
                    break;

                    // Saídas
                    case 3:
                        try {

                        InputStream is = getClass().getResourceAsStream("/relatorios/movimentacoes_entrada.jrxml");
                        JasperDesign jd = JRXmlLoader.load(is);
                        //testar com input stream
                        JasperReport jr = JasperCompileManager.compileReport(jd);

                        EntityManager em = new VistoriaDAO().getEntityManager();

                        HashMap<String, Object> parametros = new HashMap<>();
                        parametros.put(JRJpaQueryExecuterFactory.PARAMETER_JPA_ENTITY_MANAGER, em);

                        JasperPrint jp = JasperFillManager.fillReport(jr, parametros);
                        JasperViewer jv = new JasperViewer(jp, false);
                        jv.setVisible(true);

                    } catch (JRException ex) {
                        ex.printStackTrace();
                    }
                    break;
                }
                break;
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SelecionarRelatorioVisao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SelecionarRelatorioVisao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SelecionarRelatorioVisao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SelecionarRelatorioVisao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SelecionarRelatorioVisao().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBoxFiltro;
    private javax.swing.JComboBox<String> jComboBoxFiltro2;
    private com.toedter.calendar.JDateChooser jDateChooserDataFinal;
    private com.toedter.calendar.JDateChooser jDateChooserDataInicial;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelCampo;
    private javax.swing.JLabel jLabelFiltro;
    private javax.swing.JLabel jLabelFiltro2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField jTextFieldFiltro;
    // End of variables declaration//GEN-END:variables
}
