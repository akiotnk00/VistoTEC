/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package visao;

import dao.AgendamentoDAO;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Agendamento;
import modelo.Caixa;
import modelo.Cliente;
import modelo.Parceiro;

/**
 *
 * @author Akio
 */
public class JanelaAgendamentosVisao extends JDialog {

    private List<Agendamento> agendamentos;
    private final AgendamentoDAO agendamentoDAO;
    Caixa caixaaberto;

    /**
     * Creates new form JanelaAgendamentosVisao
     */
    public JanelaAgendamentosVisao() {
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/icones/vistotec-logo.png")).getImage());
        agendamentoDAO = new AgendamentoDAO();
    }

    public JanelaAgendamentosVisao(Caixa cxrecebido) {
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/icones/vistotec-logo.png")).getImage());
        agendamentoDAO = new AgendamentoDAO();
        caixaaberto = cxrecebido;

        Calendar c = Calendar.getInstance();
        c.setTime(new Date());
        jDateChooserAgendamentos.setCalendar(c);

        verificaAgendamentos(new Date());

        jDateChooserAgendamentos.getDateEditor().addPropertyChangeListener(
                new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent e) {
                if ("date".equals(e.getPropertyName())) {
                    verificaAgendamentos(jDateChooserAgendamentos.getDate());
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane5 = new javax.swing.JScrollPane();
        jTableAgendamentos = new javax.swing.JTable();
        jDateChooserAgendamentos = new com.toedter.calendar.JDateChooser();
        jLabelAgendamentosBusca = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("VistoTEC - Agendamentos");

        jTableAgendamentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Hora", "Endereço", "Tipo Veiculo", "Telefone", "Cliente", "Parceiro", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jTableAgendamentos);

        jDateChooserAgendamentos.setDateFormatString("dd/MM/yy");
        jDateChooserAgendamentos.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jDateChooserAgendamentos.setMinSelectableDate(new java.util.Date(-62135755140000L));

        jLabelAgendamentosBusca.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        jLabelAgendamentosBusca.setForeground(new java.awt.Color(204, 0, 51));
        jLabelAgendamentosBusca.setText("Resultado Agendamentos");

        jButton7.setBackground(new java.awt.Color(0, 102, 153));
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/calendario_icone.png"))); // NOI18N
        jButton7.setText("Novo Agendamento");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton8.setBackground(new java.awt.Color(255, 0, 0));
        jButton8.setForeground(new java.awt.Color(255, 255, 255));
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/deletar_icone.png"))); // NOI18N
        jButton8.setText("Excluir");

        jButton9.setBackground(new java.awt.Color(255, 0, 0));
        jButton9.setForeground(new java.awt.Color(255, 255, 255));
        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/close_icone.png"))); // NOI18N
        jButton9.setText("Fechar");

        jButton10.setBackground(new java.awt.Color(0, 102, 153));
        jButton10.setForeground(new java.awt.Color(255, 255, 255));
        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/editar_icone.png"))); // NOI18N
        jButton10.setText("Editar");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(0, 102, 153));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icones/mudar_icone.png"))); // NOI18N
        jButton1.setText("Mudar Situação");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed1(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(36, 36, 36)
                        .addComponent(jButton9))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jDateChooserAgendamentos, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelAgendamentosBusca)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane5))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDateChooserAgendamentos, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelAgendamentosBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(jButton8)
                    .addComponent(jButton9)
                    .addComponent(jButton10)
                    .addComponent(jButton1))
                .addGap(10, 10, 10))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jButton10, jButton7, jButton8, jButton9});

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Verifica se existe algum agendamento para o dia marcado no jchooser.
        if (agendamentoDAO.buscaPorData(jDateChooserAgendamentos.getDate()).isEmpty()) {
            AgendamentoVisao frame = new AgendamentoVisao(caixaaberto, jDateChooserAgendamentos.getDate());
            frame.setModal(true);
            frame.setVisible(true);
        } // Caso existe já algum agendamento no dia selecionado.
        else {

            // Pega a linha selecionada na tabela pelo usuario.
            int linha = jTableAgendamentos.getSelectedRow();

            if (linha != -1) {

                // Pergunta exibida na tela do usuario.
                int op = JOptionPane.showConfirmDialog(null, "Deseja fazer um novo agendamento?");

                // Se a opção for SIM.
                if (op == 0) {

                    // Verifica se já está com os dados preenchido no agendamento, caso sim o horário já esta agendado.
                    if (agendamentos.get(linha).getTipoveiculo() == null) {
                        AgendamentoVisao frame = new AgendamentoVisao(caixaaberto, agendamentos.get(linha));
                        frame.setModal(true);
                        frame.setVisible(true);
                    } // Caso o usuario tenha selecionado um horário já agendado.
                    else {
                        JOptionPane.showMessageDialog(null, "Esse horário já está agendado!");
                    }
                }
            } // Se não houver linha selecionada.
            else {
                JOptionPane.showMessageDialog(null, "Selecione um horário na tabela!");
            }
        }
        verificaAgendamentos(jDateChooserAgendamentos.getDate());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        int linha = jTableAgendamentos.getSelectedRow();
        if (linha != -1) {
            int op = JOptionPane.showConfirmDialog(null, "Deseja editar esse agendamento?");

            if (op == 0) {
                Agendamento a = agendamentos.get(linha);

                AgendamentoVisao frame = new AgendamentoVisao(a);
                frame.setModal(true);
                frame.setVisible(true);
                verificaAgendamentos(jDateChooserAgendamentos.getDate());

            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione um registro da tabela!");
        }

    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton1ActionPerformed1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed1
        int linha = jTableAgendamentos.getSelectedRow();
        if (linha != -1) {
            int op = JOptionPane.showConfirmDialog(null, "Deseja alterar o status do agendamento?");

            if (op == 0) {
                Agendamento a = agendamentos.get(linha);

                mudarStatusAgendamento msa = new mudarStatusAgendamento(a);
                msa.setModal(true);
                msa.setVisible(true);
                verificaAgendamentos(jDateChooserAgendamentos.getDate());

            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione um registro da tabela!");
        }
    }//GEN-LAST:event_jButton1ActionPerformed1

    // Verifica e preenche a tabela de agendamentos
    private void verificaAgendamentos(Date datarecebida) {
        DefaultTableModel dtm = (DefaultTableModel) jTableAgendamentos.getModel();

        dtm.setNumRows(0); // excluir os registros que estão na JTable

        // Se o resultado das buscas retornar algo.
        if (!agendamentoDAO.buscaPorData(datarecebida).isEmpty()) {
            agendamentos = agendamentoDAO.buscaPorData(datarecebida);

            // Variavel que ira salvar a quantidade de agendamentos.
            int contador = 0;

            // Preenche a tabela de agendamentos.
            for (Agendamento a : agendamentos) {
                dtm.addRow(new Object[]{a.getDataagendamento().getHours() + ":00", a.getEndereco(), a.getTipoveiculo(), a.getTelefone(), verificaClienteNulo(a.getCliente()), verificaNullParceiro(a.getParceiro()),retornaStatus(a.getStatus())});

                // Se o veiculo for null significa que não existe o agendamento.                
                if (a.getTipoveiculo() != null) {

                    // Incremento do contador.
                    contador++;
                }
            }

            // Se tiver mais de 1 agendamento no dia.
            if (contador > 1) {
                jLabelAgendamentosBusca.setText("Existem " + contador + " agendamentos.");
            } // Caso tenha mais de 1 agendamento para o dia.
            else {
                jLabelAgendamentosBusca.setText("Existe " + contador + " agendamento.");
            }

            // Se o resultado da busca for nulo.
        } else {
            jLabelAgendamentosBusca.setText("Não existem agendamentos.");
        }
    }

    // Retorna o status do agendamento
   private String retornaStatus(char c) {
        if (c == 'a') {
            return "Aberto";
        } else if (c == 'f') {
            return "Finalizado";
        } else if (c == 'c') {
            return "Cancelado";
        } else {
            return "";
        }
    }

    // Verifica se o parceiro é "Null" e substitui por "-" caso seja.
    private String verificaNullParceiro(Parceiro parceiro) {
        if (parceiro == null) {
            return "-";
        } else {
            // Retorna o nome do parceiro.
            return parceiro.getNome();
        }
    }

    private String verificaClienteNulo(Cliente stgrecebida) {

        if (stgrecebida == null) {
            return "";
        }
        return stgrecebida.getNome();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JanelaAgendamentosVisao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JanelaAgendamentosVisao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JanelaAgendamentosVisao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JanelaAgendamentosVisao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JanelaAgendamentosVisao().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private com.toedter.calendar.JDateChooser jDateChooserAgendamentos;
    private javax.swing.JLabel jLabelAgendamentosBusca;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTableAgendamentos;
    // End of variables declaration//GEN-END:variables
}
